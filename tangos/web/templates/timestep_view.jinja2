{% extends "layout.jinja2" %}

{% macro make_table(objects, object_type) %}
    <form id="properties_form_{{ object_type }}" class="autorestore">
        <p>Page
            <select name="page" id="page-{{ object_type }}">
                <option value="1" selected>1</option>
            </select> of <span id="num-pages-{{ object_type }}">1</span>.
            Maximum
            <select name="per_page" id="per-page-{{ object_type }}">
                {% for perpage in [10,20,50,100,200] %}
                    <option value="{{ perpage }}" {%  if perpage == 50 %}selected{% endif %}>{{ perpage }}</option>
                {% endfor %}
            </select>
            per page.</p>
        <table class="data-table" id="table-{{ object_type }}">
            <tr id="header-row-{{ object_type }}">
                <th id="header-number-{{ object_type }}">Number</th>
                <th class="editable" id="header-colid-1-{{ object_type }}"></th>
                <th id="header-go-{{ object_type }}">Go</th>
            </tr>
            <tr>
                <th></th>
                <th id="plotctl-colid-1-{{ object_type }}"></th>
                <th></th>
            </tr>

        <script>
            window.dataTables['{{ object_type }}'] = {}
            window.dataTables['{{ object_type }}']['*halo_number'] = [
                {% for h in objects %}
                    {{ h.halo_number }},
                {% endfor %}
            ];
            window.dataTables['{{ object_type }}']['*go_link'] = [
                {% for h in objects %}
                    '<a href="{{ h.url }}">Go &rarr;</a>',
                {% endfor %}
            ];
        </script>

        </table>
    </form>
{% endmacro %}

{% block content %}

    <script>
     window.dataTables = {}
    </script>
    <h1>Timestep: {{ timestep }}</h1>

    <table id="objects-container"><tr>

    {% for this_object in objects %}
        {%  if len(this_object['items'])>0 %}
        <td>
            <h2>{{ this_object['title'] }}</h2>

            {{ make_table(this_object['items'], this_object['typetag']) }}
        </td>
        {% endif %}
    {% endfor %}

    </tr></table>



<script>


$.fn.markAsColumnInsertPoint = function(editable_tag) {
    if(this.length===0)
        return;
    $(this).closest('form').on('change', function() {
        updateTableDisplay(editable_tag);
    });
    return $(this).makeEditableTemplate(addBlankColumn, removeColumn, updateColumnData, editable_tag);

}


function updateColumnData(miniLanguageQuery, columnId, editable_tag) {
    $('#header-'+columnId).html("<img src='/static/spinner.gif'/>"+miniLanguageQuery);
    $('#header-'+columnId).data('miniLanguageQuery', miniLanguageQuery);
    updatePlotControlElements('#plotctl-' + columnId, miniLanguageQuery, false, false, false);
    $.ajax({
        type: "GET",
        url: "{{ gather_url }}"+uriEncodeQuery(miniLanguageQuery)+".json",
        success: function (data) {
            $("."+columnId).html("");
            if(data.error) {
                 $('#header-'+columnId).html("<span class='load_table_failed'>"+miniLanguageQuery+"</span>")
            } else {
                $('#header-'+columnId).html(miniLanguageQuery);
                updatePlotControlElements('#plotctl-' + columnId, miniLanguageQuery, false, data.can_use_as_filter, false, true);
                window.dataTables[editable_tag][miniLanguageQuery] = data.data_formatted
            }
            updateTableDisplay(editable_tag);
        }
    });
}

function addBlankColumn(after, object_tag) {
    var new_name = "column-"+Math.random().toString(36).substring(7);
    $('.data-table tr').each(function(index) {
        $(this).find("#header-"+after).after("<th id='header-"+new_name+"' class='editable'></th>");
        $(this).find("#plotctl-"+after).after("<th id='plotctl-"+new_name+"'></th>");
    })
    $('#header-'+new_name).markAsColumnInsertPoint(object_tag);
    return new_name;
}

function removeColumn(name, object_tag) {
     $('.data-table tr').each(function(index) {
        $(this).find("#header-"+name).remove();
        $(this).find("#plotctl-"+name).remove();
    })
    updateTableDisplay(object_tag);
}


function setupDynamicTables() {

    {% for this_object in objects %}
        $('#header-number-{{ this_object['typetag'] }}').data('miniLanguageQuery', "*halo_number");
        $('#header-go-{{ this_object['typetag'] }}').data('miniLanguageQuery', "*go_link");
        $('#header-colid-1-{{ this_object["typetag"] }}').markAsColumnInsertPoint('{{ this_object["typetag"] }}');
        updateTableDisplay('{{ this_object['typetag']  }}');
    {% endfor %}

}

function updateTableDisplay(object_tag) {
    var columnsToFilterOn = [];
    var dataToFilterOn = [];

    var re = new RegExp("plotctl-(.*)");
    $('#properties_form_'+object_tag+' input[type="checkbox"]').each(function() {
        var $this = $(this);
        if($this.prop('checked') && $this.is(":visible")) {
            var control_id = $this.closest('th').attr('id');
            var column_id = re.exec(control_id)[1];
            columnsToFilterOn.push("header-"+column_id);
        }
    });

    $("#table-"+object_tag+" tr.tangos-data").remove();

    var columns = [];
    $("tr#header-row-"+object_tag+" th").each(function() {
       var miniLanguageQ = $(this).data('miniLanguageQuery');
       columns.push(window.dataTables[object_tag][miniLanguageQ]);
       if(columnsToFilterOn.includes(this.id) && window.dataTables[object_tag][miniLanguageQ]!==undefined ) {
           dataToFilterOn.push(window.dataTables[object_tag][miniLanguageQ]);
       }
    });

    var nData = 0;
    $.each(columns, function(i,c) {
        if(c !== undefined && c.length>nData) {
            nData=c.length;
        }
    });


    var rowsPerPage = parseInt($("#per-page-"+object_tag+" option:selected").text());
    var page = parseInt($("#page-"+object_tag+" option:selected").text());
    var startRow = (page-1)*rowsPerPage;
    var endRow = startRow+rowsPerPage;

    var nRowsTotal=0;
    var displayRows = [];

    for(var i=0; i<nData; i++) {
        var shouldDisplay = true;
        $.each(dataToFilterOn, function(j,c) {
            if(c[i] === 'False') shouldDisplay = false;
        });
        if(shouldDisplay) {
            if (nRowsTotal<endRow && nRowsTotal>=startRow) {
                display = "<tr class='tangos-data'>"
                $.each(columns, function(j,c) {
                    if(c!==undefined)
                        display+="<td>"+c[i]+"</td>";
                    else
                        display+="<td></td>";
                });
                display +="</tr>";
                displayRows.push(display);
            }

            nRowsTotal++;
        }
    }


    var numPages = Math.ceil(nRowsTotal/rowsPerPage);
    $("#num-pages-"+object_tag).text(numPages);

    var pageSelector = $("#page-"+object_tag)
    pageSelector.find("option").remove();
    for(var i=1; i<numPages+1; i++) {
        selected = (i==page)?" selected":"";
        pageSelector.append("<option name='"+i+"'"+selected+">"+i+"</option>")
    }

    $("#table-"+object_tag).append(displayRows);


}


setupDynamicTables();


</script>

{% endblock content %}
